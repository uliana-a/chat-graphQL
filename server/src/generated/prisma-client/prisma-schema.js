module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMessage {
  count: Int!
}

type AggregateResponse {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Message {
  id: ID!
  createdAt: DateTime!
  text: String!
  likeCount: Int!
  dislikeCount: Int!
  responses(where: ResponseWhereInput, orderBy: ResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Response!]
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  text: String!
  likeCount: Int!
  dislikeCount: Int!
  responses: ResponseCreateManyWithoutMessageInput
}

input MessageCreateOneWithoutResponsesInput {
  create: MessageCreateWithoutResponsesInput
  connect: MessageWhereUniqueInput
}

input MessageCreateWithoutResponsesInput {
  id: ID
  text: String!
  likeCount: Int!
  dislikeCount: Int!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  likeCount_ASC
  likeCount_DESC
  dislikeCount_ASC
  dislikeCount_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
  likeCount: Int!
  dislikeCount: Int!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  text: String
  likeCount: Int
  dislikeCount: Int
  responses: ResponseUpdateManyWithoutMessageInput
}

input MessageUpdateManyMutationInput {
  text: String
  likeCount: Int
  dislikeCount: Int
}

input MessageUpdateOneRequiredWithoutResponsesInput {
  create: MessageCreateWithoutResponsesInput
  update: MessageUpdateWithoutResponsesDataInput
  upsert: MessageUpsertWithoutResponsesInput
  connect: MessageWhereUniqueInput
}

input MessageUpdateWithoutResponsesDataInput {
  text: String
  likeCount: Int
  dislikeCount: Int
}

input MessageUpsertWithoutResponsesInput {
  update: MessageUpdateWithoutResponsesDataInput!
  create: MessageCreateWithoutResponsesInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  dislikeCount: Int
  dislikeCount_not: Int
  dislikeCount_in: [Int!]
  dislikeCount_not_in: [Int!]
  dislikeCount_lt: Int
  dislikeCount_lte: Int
  dislikeCount_gt: Int
  dislikeCount_gte: Int
  responses_every: ResponseWhereInput
  responses_some: ResponseWhereInput
  responses_none: ResponseWhereInput
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createResponse(data: ResponseCreateInput!): Response!
  updateResponse(data: ResponseUpdateInput!, where: ResponseWhereUniqueInput!): Response
  updateManyResponses(data: ResponseUpdateManyMutationInput!, where: ResponseWhereInput): BatchPayload!
  upsertResponse(where: ResponseWhereUniqueInput!, create: ResponseCreateInput!, update: ResponseUpdateInput!): Response!
  deleteResponse(where: ResponseWhereUniqueInput!): Response
  deleteManyResponses(where: ResponseWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  response(where: ResponseWhereUniqueInput!): Response
  responses(where: ResponseWhereInput, orderBy: ResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Response]!
  responsesConnection(where: ResponseWhereInput, orderBy: ResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResponseConnection!
  node(id: ID!): Node
}

type Response {
  id: ID!
  createdAt: DateTime!
  text: String!
  likeCount: Int!
  dislikeCount: Int!
  message: Message!
}

type ResponseConnection {
  pageInfo: PageInfo!
  edges: [ResponseEdge]!
  aggregate: AggregateResponse!
}

input ResponseCreateInput {
  id: ID
  text: String!
  likeCount: Int!
  dislikeCount: Int!
  message: MessageCreateOneWithoutResponsesInput!
}

input ResponseCreateManyWithoutMessageInput {
  create: [ResponseCreateWithoutMessageInput!]
  connect: [ResponseWhereUniqueInput!]
}

input ResponseCreateWithoutMessageInput {
  id: ID
  text: String!
  likeCount: Int!
  dislikeCount: Int!
}

type ResponseEdge {
  node: Response!
  cursor: String!
}

enum ResponseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  likeCount_ASC
  likeCount_DESC
  dislikeCount_ASC
  dislikeCount_DESC
}

type ResponsePreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
  likeCount: Int!
  dislikeCount: Int!
}

input ResponseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  dislikeCount: Int
  dislikeCount_not: Int
  dislikeCount_in: [Int!]
  dislikeCount_not_in: [Int!]
  dislikeCount_lt: Int
  dislikeCount_lte: Int
  dislikeCount_gt: Int
  dislikeCount_gte: Int
  AND: [ResponseScalarWhereInput!]
  OR: [ResponseScalarWhereInput!]
  NOT: [ResponseScalarWhereInput!]
}

type ResponseSubscriptionPayload {
  mutation: MutationType!
  node: Response
  updatedFields: [String!]
  previousValues: ResponsePreviousValues
}

input ResponseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResponseWhereInput
  AND: [ResponseSubscriptionWhereInput!]
  OR: [ResponseSubscriptionWhereInput!]
  NOT: [ResponseSubscriptionWhereInput!]
}

input ResponseUpdateInput {
  text: String
  likeCount: Int
  dislikeCount: Int
  message: MessageUpdateOneRequiredWithoutResponsesInput
}

input ResponseUpdateManyDataInput {
  text: String
  likeCount: Int
  dislikeCount: Int
}

input ResponseUpdateManyMutationInput {
  text: String
  likeCount: Int
  dislikeCount: Int
}

input ResponseUpdateManyWithoutMessageInput {
  create: [ResponseCreateWithoutMessageInput!]
  delete: [ResponseWhereUniqueInput!]
  connect: [ResponseWhereUniqueInput!]
  set: [ResponseWhereUniqueInput!]
  disconnect: [ResponseWhereUniqueInput!]
  update: [ResponseUpdateWithWhereUniqueWithoutMessageInput!]
  upsert: [ResponseUpsertWithWhereUniqueWithoutMessageInput!]
  deleteMany: [ResponseScalarWhereInput!]
  updateMany: [ResponseUpdateManyWithWhereNestedInput!]
}

input ResponseUpdateManyWithWhereNestedInput {
  where: ResponseScalarWhereInput!
  data: ResponseUpdateManyDataInput!
}

input ResponseUpdateWithoutMessageDataInput {
  text: String
  likeCount: Int
  dislikeCount: Int
}

input ResponseUpdateWithWhereUniqueWithoutMessageInput {
  where: ResponseWhereUniqueInput!
  data: ResponseUpdateWithoutMessageDataInput!
}

input ResponseUpsertWithWhereUniqueWithoutMessageInput {
  where: ResponseWhereUniqueInput!
  update: ResponseUpdateWithoutMessageDataInput!
  create: ResponseCreateWithoutMessageInput!
}

input ResponseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  dislikeCount: Int
  dislikeCount_not: Int
  dislikeCount_in: [Int!]
  dislikeCount_not_in: [Int!]
  dislikeCount_lt: Int
  dislikeCount_lte: Int
  dislikeCount_gt: Int
  dislikeCount_gte: Int
  message: MessageWhereInput
  AND: [ResponseWhereInput!]
  OR: [ResponseWhereInput!]
  NOT: [ResponseWhereInput!]
}

input ResponseWhereUniqueInput {
  id: ID
}

type Subscription {
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  response(where: ResponseSubscriptionWhereInput): ResponseSubscriptionPayload
}
`
      }
    